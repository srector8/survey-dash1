# -*- coding: utf-8 -*-
"""Survey Data Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gr_RwxdK7WksZZraCxQmHQvTKIjZh3Ls
"""

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt

def main():
    st.title("Survey Data Dashboard")

    # File upload widget
    file_path = "Feedback-Responses-2024-05-17_updated.csv"

    if file_path is not None:
        # Read the uploaded CSV file
        data = pd.read_csv(file_path)

        # Convert the timestamp to datetime and extract the date
        data['date'] = pd.to_datetime(data['timestamp'], format='%m/%d/%y %H:%M').dt.date

        # Define game days
        game_day_1 = pd.to_datetime('2024-05-14').date()
        game_day_2 = pd.to_datetime('2024-05-17').date()

        # Categorize the responses based on the date
        def categorize_date(date):
            if date > game_day_1 and date < game_day_2:
                return '2024-05-14'
            elif date >= game_day_2:
                return '2024-05-17'
            else:
                return None

        data['game_day'] = data['date'].apply(categorize_date)

        # Filter out rows with None game_day
        data = data.dropna(subset=['game_day'])

        # Convert rating column to integers
        try:
            data['choice_text'] = pd.to_numeric(data['choice_text'], errors='raise').astype(float)
        except ValueError:
            pass

        # Create tabs
        tab1, tab2, tab3 = st.tabs(["Multi-Question by Date", "Single Question Comparison by Date", "Average Ratings by Date"])

        with tab1:
            st.header("Multi-Question by Date")
            # Create a multiselect for selecting game days
            game_days = st.multiselect("Select Game Days", sorted(data['game_day'].unique()))

            # Filter the data based on the selected game days
            filtered_data = data[data['game_day'].isin(game_days)]

            # Create a multiselect for selecting questions based on the filtered data
            questions = st.multiselect("Select Questions", sorted(filtered_data['question'].unique()))

            # Plot graphs and count tables based on selected game days and questions
            plot_data(filtered_data, questions)

        with tab2:
            st.header("Single Question Comparison by Date")
            # Create a selectbox for selecting a question
            question = st.selectbox("Select Question", sorted(data['question'].unique()))

            # Create a multiselect for selecting game days
            comparison_game_days = st.multiselect("Select Game Days for Comparison", sorted(data['game_day'].unique()))

            # Plot graphs side by side for comparison
            if comparison_game_days:
                plot_comparison_data(data, question, comparison_game_days)
            else:
                st.warning("Please select at least one game day for comparison.")

        with tab3:
            st.header("Average Ratings by Date")
            # Get rating questions
            rating_questions = get_rating_questions(data)

            # Create a multiselect for selecting rating questions
            selected_rating_questions = st.multiselect("Select Rating Questions", rating_questions)

            if selected_rating_questions:
                plot_average_ratings(data, selected_rating_questions)
            else:
                st.warning("Please select at least one rating question.")

def get_rating_questions(data):
    # Find questions that require a numeric rating
    rating_questions = data[data['question'].str.contains('rating', case=False) & (data['choice_text'].apply(lambda x: isinstance(x, (int, float))))]
    return rating_questions['question'].unique()

def plot_average_ratings(data, selected_rating_questions):
    for question in selected_rating_questions:
        question_data = data[data['question'] == question]

        # Calculate average rating for each date
        average_ratings = question_data.groupby('date')['choice_text'].mean()

        # Plot time-series bar plot
        plt.figure(figsize=(10, 5))
        average_ratings.plot(kind='bar')
        plt.title(f'Average Rating Over Time for "{question}"')
        plt.xlabel('Date')
        plt.ylabel('Average Rating')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        # Display bar plot in Streamlit
        st.pyplot(plt)

if __name__ == "__main__":
    main()
