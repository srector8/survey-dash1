# -*- coding: utf-8 -*-
"""Survey Data Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gr_RwxdK7WksZZraCxQmHQvTKIjZh3Ls
"""

import pandas as pd
import streamlit as st
import altair as alt

def preprocess_data(data):
    

import pandas as pd
import streamlit as st
import altair as alt
\
def preprocess_data(data):
    try:
        # Check if 'choice_text' column values can be converted to float
        data['choice_text'] = data['choice_text'].apply(lambda x: float(x) if isinstance(x, (int, float)) or x.replace('.', '', 1).isdigit() else x)
    except ValueError:
        pass

    # Find questions that have numeric values in the 'choice_text' column
    numeric_questions = data.groupby('question')['choice_text'].apply(lambda x: x.apply(lambda y: isinstance(y, (int, float))).any())

    rating_questions = numeric_questions[numeric_questions].index.tolist()

    # Filter out 'Test Question' if present
    if 'Test Question' in rating_questions:
        rating_questions.remove('Test Question')

    return data, rating_questions

def main():
    st.title("Survey Data Dashboard")

    # File upload widget
    file_path = "Feedback-Responses-2024-06-12.csv"

    if file_path is not None:
        # Read the uploaded CSV file
        data = pd.read_csv(file_path)

        data['date'] = pd.to_datetime(data['timestamp'], format='%m/%d/%Y %H:%M').dt.date

        # Preprocess the data
        data, rating_questions = preprocess_data(data)

        # Define game days
        game_days = [
            (pd.to_datetime('2024-05-14').date(), pd.to_datetime('2024-05-17').date()),
            (pd.to_datetime('2024-05-17').date(), pd.to_datetime('2024-05-23').date()),
            (pd.to_datetime('2024-05-23').date(), pd.to_datetime('2024-05-28').date()),
            (pd.to_datetime('2024-05-28').date(), pd.to_datetime('2024-05-31').date()),
            (pd.to_datetime('2024-05-31').date(), pd.to_datetime('2024-06-04').date()),
            (pd.to_datetime('2024-06-04').date(), pd.to_datetime('2024-06-08').date()),
            (pd.to_datetime('2024-06-08').date(), pd.to_datetime('2024-06-10').date()),
            (pd.to_datetime('2024-06-10').date(), pd.to_datetime('2024-06-18').date()),
            (pd.to_datetime('2024-06-18').date(), pd.to_datetime('2024-06-28').date()),
            (pd.to_datetime('2024-06-28').date(), pd.to_datetime('2024-07-07').date()),
            (pd.to_datetime('2024-07-07').date(), pd.to_datetime('2024-07-10').date()),
            (pd.to_datetime('2024-07-10').date(), pd.to_datetime('2024-07-14').date()),
            (pd.to_datetime('2024-07-14').date(), pd.to_datetime('2024-08-20').date()),
            (pd.to_datetime('2024-08-20').date(), pd.to_datetime('2024-08-23').date()),
            (pd.to_datetime('2024-08-23').date(), pd.to_datetime('2024-09-01').date()),
            (pd.to_datetime('2024-09-01').date(), pd.to_datetime('2024-09-03').date()),
            (pd.to_datetime('2024-09-03').date(), pd.to_datetime('2024-09-06').date()),
            (pd.to_datetime('2024-09-06').date(), pd.to_datetime('2024-09-17').date()),
            (pd.to_datetime('2024-09-17').date(), pd.to_datetime('2024-09-19').date())
        ]

        # Categorize the responses based on the date
        def categorize_date(date):
            for start_date, end_date in game_days:
                if start_date <= date < end_date:
                    return start_date.strftime('%Y-%m-%d')
            return None

        data['game_day'] = data['date'].apply(categorize_date)
        data = data.dropna(subset=['game_day'])

        # Create tabs
        tab1, tab2, tab3 = st.columns(3)

        with tab1:
            st.header("Cumulative Responses by Question")
            st.write("Select multiple questions and game days to see the distribution of responses.")

            game_days_select = st.multiselect("Select Game Days", sorted(data['game_day'].unique()))
            questions_select = st.multiselect("Select Questions", sorted(data['question'].unique()))

            if game_days_select and questions_select:
                plot_data_altair(data, questions_select, game_days_select)

        with tab2:
            st.header("Single Question Comparison by Date")
            st.write("Select a single question and multiple game days for comparison.")

            question_select = st.selectbox("Select Question", sorted(data['question'].unique()))
            comparison_game_days_select = st.multiselect("Select Game Days for Comparison", sorted(data['game_day'].unique()))

            if question_select and comparison_game_days_select:
                plot_comparison_data_altair(data, question_select, comparison_game_days_select)

        with tab3:
            st.header("Average Ratings by Date")
            st.write("Select rating questions to see the average ratings over time.")

            if rating_questions:
                selected_rating_questions = st.multiselect("Select Rating Questions", rating_questions)
                if selected_rating_questions:
                    plot_average_ratings_altair(data, selected_rating_questions)
                else:
                    st.warning("Please select at least one rating question.")
            else:
                st.warning("No rating questions found in the dataset.")

def plot_data_altair(data, questions, game_days):
    for question in questions:
        question_data = data[data['question'] == question]

        # Create an Altair bar chart
        chart = alt.Chart(question_data).mark_bar().encode(
            x=alt.X('choice_text:N', title='Choices'),
            y=alt.Y('count():Q', title='Frequency'),
            tooltip=['choice_text', 'count()']
        ).properties(
            title=f'Question: {question}'
        ).interactive()

        # Display the chart using Streamlit
        st.altair_chart(chart, use_container_width=True)

def plot_comparison_data_altair(data, question, game_days):
    # Similar logic as above, create Altair charts for comparison
    pass

def plot_average_ratings_altair(data, selected_rating_questions):
    # Similar logic as above, create Altair charts for average ratings
    pass

if __name__ == "__main__":
    main()
